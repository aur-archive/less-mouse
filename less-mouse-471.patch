diff -aur less-471/cmd.h less-471-new/cmd.h
--- less-471/cmd.h	2014-12-14 13:19:14.000000000 -0500
+++ less-471-new/cmd.h	2015-02-23 10:45:22.622408240 -0500
@@ -73,7 +73,10 @@
 #define	A_UINVALID		102
 #define	A_END_LIST		103
 #define	A_SPECIAL_KEY		104
-
+ 
+#define A_MOUSE			126
+#define	A_B_MOUSE_SCROLL	71
+#define	A_F_MOUSE_SCROLL	72
 #define A_SKIP			127
 
 #define	A_EXTRA			0200
@@ -132,3 +135,17 @@
 #define SK_BACKTAB		15
 #define SK_CTL_BACKSPACE	16
 #define SK_CONTROL_K		40
+
+#define M_BTN1			1
+#define M_BTN2			2
+#define M_BTN3			3
+#define M_BTN4			4
+#define M_BTN5			5
+#define M_BTN_FIRST		M_BTN1
+#define M_BTN_LAST		M_BTN5
+
+#define M_BTN_RELEASE		0x23
+
+#define MOD_NONE		1
+#define MOD_ALT    2
+#define MOD_CTRL		4
diff -aur less-471/command.c less-471-new/command.c
--- less-471/command.c	2014-12-14 13:19:11.000000000 -0500
+++ less-471-new/command.c	2015-02-23 10:50:19.436188909 -0500
@@ -1010,7 +1010,7 @@
 	IFILE old_ifile;
 	IFILE new_ifile;
 	char *tagfile;
-
+	char btn[3];
 	search_type = SRCH_FORW;
 	wscroll = (sc_height + 1) / 2;
 	newaction = A_NOACTION;
@@ -1131,7 +1131,7 @@
 		 */
 		if (action != A_PREFIX)
 			cmd_reset();
-
+		action:
 		switch (action)
 		{
 		case A_DIGIT:
@@ -1766,7 +1766,44 @@
 			hshift -= number;
 			screen_trashed = 1;
 			break;
+ 
+		case A_F_MOUSE_SCROLL:
+			/*
+			 * Forward 3 lines.
+			 */
+			cmd_exec();
+			if (show_attn == OPT_ONPLUS)
+				set_attnpos(bottompos);
+			forward(3, 0, 0);
+			break;
+
+		case A_B_MOUSE_SCROLL:
+			/*
+			 * Backward 3 lines.
+			 */
+			cmd_exec();
+			backward(3, 0, 0);
+			break;
+
+		case A_MOUSE:
+			cmd_reset();
+
+			if (decode_button(btn))
+				break;
 
+			btn[2] = 0;
+			extra = NULL;
+			action = bcmd_decode(&btn, &extra);
+
+			switch (action) {
+			case A_INVALID:
+			case A_NOACTION:
+				break;
+
+			default:
+				goto action;
+			}
+ 
 		case A_RSHIFT:
 			if (number > 0)
 				shift_count = number;
diff -aur less-471/decode.c less-471-new/decode.c
--- less-471/decode.c	2014-12-14 13:19:11.000000000 -0500
+++ less-471-new/decode.c	2015-02-23 11:09:04.657861328 -0500
@@ -65,6 +65,7 @@
 	CONTROL('D'),0,			A_F_SCROLL,
 	'u',0,				A_B_SCROLL,
 	CONTROL('U'),0,			A_B_SCROLL,
+	ESC,'[','M',0,			A_MOUSE,
 	' ',0,				A_F_SCREEN,
 	'f',0,				A_F_SCREEN,
 	CONTROL('F'),0,			A_F_SCREEN,
@@ -204,6 +205,45 @@
 	ESC,'j',0,			EC_DOWN,	/* ESC j */
 	SK(SK_DOWN_ARROW),0,		EC_DOWN,	/* DOWNARROW */
 	CONTROL('G'),0,			EC_ABORT,	/* CTRL-G */
+	ESC,'[','M',0,			A_MOUSE,
+};
+
+static unsigned char cmdbtntable[] =
+{
+	MOD_NONE,M_BTN4,0,		A_B_MOUSE_SCROLL, //A_B_SCROLL,
+	MOD_NONE,M_BTN5,0,		A_F_MOUSE_SCROLL, //A_F_SCROLL,
+	MOD_CTRL,M_BTN4,0,		A_B_SCROLL, //A_B_LINE,
+	MOD_CTRL,M_BTN5,0,		A_F_SCROLL, //A_F_LINE,
+	MOD_ALT,M_BTN4,0,		A_B_SCREEN,
+	MOD_ALT,M_BTN5,0,		A_F_SCREEN,
+	MOD_NONE,M_BTN1,0,		A_NOACTION, //A_AGAIN_SEARCH,
+	MOD_NONE,M_BTN3,0,		A_NOACTION, //A_REVERSE_SEARCH,
+	MOD_CTRL,M_BTN1,0,		A_NOACTION, //A_T_AGAIN_SEARCH,
+	MOD_CTRL,M_BTN3,0,		A_NOACTION, //A_T_REVERSE_SEARCH,
+	MOD_NONE,M_BTN2,0,		A_NOACTION,
+	MOD_CTRL,M_BTN2,0,		A_NOACTION,
+	MOD_ALT,M_BTN1,0,		A_NOACTION,
+	MOD_ALT,M_BTN2,0,		A_NOACTION,
+	MOD_ALT,M_BTN3,0,		A_NOACTION,
+};
+
+static unsigned char editbtntable[] =
+{
+	MOD_NONE,M_BTN1,0,		A_NOACTION,
+	MOD_NONE,M_BTN2,0,		A_NOACTION,
+	MOD_NONE,M_BTN3,0,		A_NOACTION,
+	MOD_NONE,M_BTN4,0,		EC_UP,
+	MOD_NONE,M_BTN5,0,		EC_DOWN,
+	MOD_CTRL,M_BTN1,0,		A_NOACTION,
+	MOD_CTRL,M_BTN2,0,		A_NOACTION,
+	MOD_CTRL,M_BTN3,0,		A_NOACTION,
+	MOD_CTRL,M_BTN4,0,		A_NOACTION,
+	MOD_CTRL,M_BTN5,0,		A_NOACTION,
+	MOD_ALT,M_BTN1,0,		A_NOACTION,
+	MOD_ALT,M_BTN2,0,		A_NOACTION,
+	MOD_ALT,M_BTN3,0,		A_NOACTION,
+	MOD_ALT,M_BTN4,0,		A_NOACTION,
+	MOD_ALT,M_BTN5,0,		A_NOACTION,
 };
 
 /*
@@ -221,6 +261,8 @@
  */
 static struct tablelist *list_fcmd_tables = NULL;
 static struct tablelist *list_ecmd_tables = NULL;
+static struct tablelist *list_cb_cmd_tables = NULL;
+static struct tablelist *list_eb_cmd_tables = NULL;
 static struct tablelist *list_var_tables = NULL;
 static struct tablelist *list_sysvar_tables = NULL;
 
@@ -297,6 +339,8 @@
 	 */
 	add_fcmd_table((char*)cmdtable, sizeof(cmdtable));
 	add_ecmd_table((char*)edittable, sizeof(edittable));
+	add_cb_cmd_table((char*)cmdbtntable, sizeof(cmdbtntable));
+	add_eb_cmd_table((char*)editbtntable, sizeof(editbtntable));
 #if USERFILE
 	/*
 	 * For backwards compatibility,
@@ -369,6 +413,27 @@
 	if (add_cmd_table(&list_ecmd_tables, buf, len) < 0)
 		error("Warning: some edit commands disabled", NULL_PARG);
 }
+ 
+/*
+* Add a mouse button command table.
+*/
+	public void
+add_cb_cmd_table(buf, len)
+	char *buf;
+	int len;
+{
+	if (add_cmd_table(&list_cb_cmd_tables, buf, len) < 0)
+		error("Warning: some edit commands disabled", NULL_PARG);
+}
+
+	public void
+add_eb_cmd_table(buf, len)
+	char *buf;
+	int len;
+{
+	if (add_cmd_table(&list_eb_cmd_tables, buf, len) < 0)
+		error("Warning: some edit commands disabled", NULL_PARG);
+}
 
 /*
  * Add an environment variable table.
@@ -520,8 +585,30 @@
 ecmd_decode(cmd, sp)
 	char *cmd;
 	char **sp;
+ {
+	char btn[3];
+	int action = cmd_decode(list_ecmd_tables, cmd, sp);
+
+	if (action == A_MOUSE) {
+		if (decode_button(btn)) {
+			return (A_NOACTION);
+		}
+
+		btn[2] = 0;
+		return (cmd_decode(list_eb_cmd_tables, btn, sp));
+	}
+	return (action);
+}
+
+/*
+ * Decode a command from the cmdbtntables list.
+ */
+	public int
+bcmd_decode(cmd,sp)
+	char *cmd;
+	char **sp;
 {
-	return (cmd_decode(list_ecmd_tables, cmd, sp));
+	return (cmd_decode(list_cb_cmd_tables, cmd, sp));
 }
 
 /*
@@ -622,6 +709,16 @@
 			add_ecmd_table(p, n);
 			p += n;
 			break;
+		case CMD_BTN_SECTION:
+			n = gint(&p);
+			add_cb_cmd_table(p, n);
+			p = n;
+			break;
+		case EDIT_BTN_SECTION:
+			n = gint(&p);
+			add_eb_cmd_table(p, n);
+			p = n;
+			break;
 		case VAR_SECTION:
 			n = gint(&p);
 			add_var_table((sysvar) ? 
@@ -839,4 +936,39 @@
 	}
 	return action;
 }
+ 
+/*
+ * Read a character and decode into mod  button.
+ *
+ * Bits 0-1 = Button number (buttons 0-2, 3 is release).
+ * Bit 2 = Shift status (according to rxvtRef, but why?).
+ * Bit 3 = Alt/Meta status.
+ * Bit 4 = Control status.
+ * Bit 5 = Always set to make the character printable (i.e. >space).
+ * Bit 6 = Indicates a wheel event (bit 0 is up/down).
+ * Bit 7 = Unknown.
+ *
+ * Return 0 if OK, 1 if button should be ignored (button release).
+ */
+	public int
+decode_button(btn)
+	char btn[2];
+{
+	int b = getcc();
 
+	/* Discard x/y coordinates. */
+	getcc();
+	getcc();
+ 
+	/* Ignore release events. */
+	if ((b & 0x23) == M_BTN_RELEASE)
+		return (1);
+
+	btn[0] = (b & 0x1c) >> 2;
+	if (!btn[0]) btn[0] = 1;
+
+	btn[1] = (b & 3) | ((b & 0x40) >> 4);
+	if (btn[1] < 4) (btn[1]);
+
+	return (0);
+}
diff -aur less-471/funcs.h less-471-new/funcs.h
--- less-471/funcs.h	2014-12-14 13:19:14.000000000 -0500
+++ less-471-new/funcs.h	2015-02-23 11:11:39.904991023 -0500
@@ -92,8 +92,11 @@
 	public void init_cmds ();
 	public void add_fcmd_table ();
 	public void add_ecmd_table ();
-	public int fcmd_decode ();
-	public int ecmd_decode ();
+	public void add_cb_cmd_table ();
+	public void add_eb_cmd_table ();
+ 	public int fcmd_decode ();
+ 	public int ecmd_decode ();
+	public int bcmd_decode ();
 	public char * lgetenv ();
 	public int lesskey ();
 	public void add_hometable ();
@@ -296,3 +299,6 @@
 	public void open_getchr ();
 	public void close_getchr ();
 	public int getchr ();
+	public void xwin_mouse_on ();
+	public void xwin_mouse_off ();
+	public int decode_button(char btn[2]);
diff -aur less-471/less.h less-471-new/less.h
--- less-471/less.h	2014-12-14 13:19:15.000000000 -0500
+++ less-471-new/less.h	2015-02-23 11:13:27.105863542 -0500
@@ -490,6 +490,7 @@
 #define	S_INTERRUPT	01
 #define	S_STOP		02
 #define S_WINCH		04
+#define S_TERM		8
 #define	ABORT_SIGS()	(sigs & (S_INTERRUPT|S_STOP))
 
 #define	QUIT_OK		0
diff -aur less-471/lesskey.c less-471-new/lesskey.c
--- less-471/lesskey.c	2014-12-14 13:19:14.000000000 -0500
+++ less-471-new/lesskey.c	2015-02-23 12:05:28.393296037 -0500
@@ -188,6 +188,8 @@
 
 struct table cmdtable;
 struct table edittable;
+struct table cbtntable;
+struct table ebtntable;
 struct table vartable;
 struct table *currtable = &cmdtable;
 
@@ -204,6 +206,8 @@
 };
 char cmdsection[1] =	{ CMD_SECTION };
 char editsection[1] =	{ EDIT_SECTION };
+char cbtnsection[1] =	{ CMD_BTN_SECTION };
+char ebtnsection[1] =	{ EDIT_BTN_SECTION };
 char varsection[1] =	{ VAR_SECTION };
 char endsection[1] =	{ END_SECTION };
 
@@ -346,7 +350,12 @@
 
 	edittable.names = editnames;
 	edittable.pbuffer = edittable.buffer;
+ 
+	cbtntable.names = cmdnames;
+	cbtntable.pbuffer = cbtntable.buffer;
 
+	ebtntable.names = editnames;
+	ebtntable.pbuffer = ebtntable.buffer;
 	vartable.names = NULL;
 	vartable.pbuffer = vartable.buffer;
 }
@@ -559,6 +568,16 @@
 		currtable = &vartable;
 		return (1);
 	}
+	if (PREFIX(s, "#cmdbutton"))
+	{
+		currtable = &cbtntable;
+		return (1);
+	}
+	if (PREFIX(s, "#editbutton"))
+	{
+		currtable = &ebtntable;
+		return (1);
+	}
 	if (PREFIX(s, "#stop"))
 	{
 		add_cmd_char('\0');
@@ -702,6 +721,50 @@
 }
 
 	void
+
+parse_btnline(p)
+	char *p;
+{
+	char buf[2];
+	int c;
+	int action;
+
+	buf[0] = MOD_NONE;
+	buf[1] = 0;
+
+	c = tolower(*p);
+	if (c == 'c') {
+		buf[0] = MOD_CTRL;
+		c = *p;
+	} else if (c == 'a') {
+		buf[0] = MOD_ALT;
+		c = *p;
+	}
+
+	c -= '0';
+	if (c >= M_BTN_FIRST && c <= M_BTN_LAST) {
+		buf[1] = c;
+	} else {
+		error("bad button number");
+		return;
+	}
+
+	p = skipsp(p);
+	if (*p == '\0')
+	{
+		error("missing action");
+		return;
+	}
+
+	add_cmd_char(buf[0]);
+	add_cmd_char(buf[1]);
+	add_cmd_char('\0');
+	action = findaction(p);
+	add_cmd_char(action);
+}
+
+	void
+
 parse_varline(p)
 	char *p;
 {
@@ -758,10 +821,13 @@
 	if (*p == '\0')
 		return;
 
-	if (currtable == &vartable)
-		parse_varline(p);
-	else
-		parse_cmdline(p);
+	if (currtable == &vartable) {
+ 		parse_varline(p);
+	} else if (currtable == &cbtntable || currtable == &ebtntable) {
+		parse_btnline(p);
+	} else {
+ 		parse_cmdline(p);
+	}
 }
 
 	int
@@ -861,6 +927,16 @@
 	fputbytes(out, editsection, sizeof(editsection));
 	fputint(out, edittable.pbuffer - edittable.buffer);
 	fputbytes(out, (char *)edittable.buffer, edittable.pbuffer-edittable.buffer);
+ 
+	/* Cmd button section */
+	fputbytes(out, cbtnsection, sizeof(cbtnsection));
+	fputint(out, cbtntable.pbuffer - cbtntable.buffer);
+	fputbytes(out, (char *)cbtntable.buffer, cbtntable.pbuffer-cbtntable.buffer);
+
+	/* Edit button section */
+	fputbytes(out, ebtnsection, sizeof(ebtnsection));
+	fputint(out, ebtntable.pbuffer - ebtntable.buffer);
+	fputbytes(out, (char *)ebtntable.buffer, ebtntable.pbuffer-ebtntable.buffer);
 
 	/* Environment variable section */
 	fputbytes(out, varsection, sizeof(varsection)); 
diff -aur less-471/lesskey.h less-471-new/lesskey.h
--- less-471/lesskey.h	2014-12-14 13:19:15.000000000 -0500
+++ less-471-new/lesskey.h	2015-02-23 11:28:04.171689342 -0500
@@ -28,6 +28,8 @@
 
 #define	CMD_SECTION		'c'
 #define	EDIT_SECTION		'e'
+#define CMD_BTN_SECTION		'b'
+#define EDIT_BTN_SECTION	'B'
 #define	VAR_SECTION		'v'
 #define	END_SECTION		'x'
 
diff -aur less-471/screen.c less-471-new/screen.c
--- less-471/screen.c	2014-12-14 13:19:10.000000000 -0500
+++ less-471-new/screen.c	2015-02-23 11:36:06.272990925 -0500
@@ -208,6 +208,8 @@
 static char *cheaper();
 static void tmodes();
 #endif
+ 
+static int use_mouse;		/* Enable XWin mouse button reporting */
 
 /*
  * These two variables are sometimes defined in,
@@ -1559,6 +1561,12 @@
 	initcolor();
 	flush();
 #endif
+
+//	if (getenv("LESSUSEMOUSE")) {
+		use_mouse = 1;
+		xwin_mouse_on();
+//	}
+
 	init_done = 1;
 }
 
@@ -1586,6 +1594,7 @@
 	clreol();
 #endif
 #endif
+	xwin_mouse_off();
 	init_done = 0;
 }
 
@@ -2499,3 +2508,22 @@
 #endif
 }
 #endif
+
+#define XWIN_MOUSE_ON	"\033[?1000h"
+#define XWIN_MOUSE_OFF	"\033[?1000l"
+
+	public void
+xwin_mouse_on()
+{
+	if (use_mouse) {
+		tputs(XWIN_MOUSE_ON, 1, putchr);
+	}
+}
+
+	public void
+xwin_mouse_off()
+{
+	if (use_mouse) {
+		tputs(XWIN_MOUSE_OFF, 1, putchr);
+	}
+}
diff -aur less-471/signal.c less-471-new/signal.c
--- less-471/signal.c	2014-12-14 13:19:13.000000000 -0500
+++ less-471-new/signal.c	2015-02-23 11:41:20.226610118 -0500
@@ -77,6 +77,22 @@
 		intread();
 }
 #endif
+ 
+#ifdef SIGTERM
+/*
+ * Term signal handler.
+ */
+	/* ARGSUSED*/
+	static RETSIGTYPE
+term(type)
+	int type;
+{
+	LSIGNAL(SIGTERM, term);
+	sigs |= S_TERM;
+	if (reading)
+		intread();
+}
+#endif
 
 #ifdef SIGWINCH
 /*
@@ -161,6 +177,9 @@
 #ifdef SIGQUIT
 		(void) LSIGNAL(SIGQUIT, SIG_IGN);
 #endif
+#ifdef SIGTERM
+		(void) LSIGNAL(SIGTERM, term);
+#endif
 	} else
 	{
 		/*
@@ -247,10 +266,16 @@
 			screen_trashed = 1;
 		}
 	}
+#ifdef S_TERM
+	if (tsignals & S_TERM)
+	{
+		quit(QUIT_OK);
+	}
 #endif
 	if (tsignals & S_INTERRUPT)
 	{
 		if (quit_on_intr)
 			quit(QUIT_INTERRUPT);
 	}
+#endif
 }
